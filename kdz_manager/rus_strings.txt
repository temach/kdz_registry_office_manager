AdminAreaDataRow.cs: 10: /// агрегатов ряд книг под именем автора.
AdminAreaDataRow.cs: 19: /// Возвращает количество различных цен на книги.
AdminAreaDataRow.cs: 20: /// (например, если три книги имеют ту же цену они считаться одним )
AdminAreaDataRow.cs: 29: /// Беспараметрическая конструктор необходимо для использования в CSV парсер.
AdminAreaDataRow.cs: 39: /// Построить автора от карт DataRow
AdminAreaDataRow.cs:50: /// Создать новый экземпляр из разобранного данных
EditRowForm.cs: 28: /// Создать поля ввода в зависимости от типа класса.
EditRowForm.cs: 29: /// Так один вход поле соответствует классу имущества.
EditRowForm.cs:55: /// указан текст Входы для отслеживания состояния сетке данных.
EditRowForm.cs: 56: /// Это должно позволить пользователю редактировать записи.
EditRowForm.cs: 57: /// сбрасывает DataBindings и BackColor.
EditRowForm.cs: 58: /// необходимо сбросить управления, так как мы повторно использовать их.
EditRowForm.cs: 72: /// Пользователь нажал кнопку отправки данных.
EditorTextBox.cs: 22: /// Если мы сможем успешно связываться с DataTable
EditorTextBox.cs: 23: /// (имеется в виду: если введенные данные действительно )
EditorTextBox.cs: 28: /// Строка для описания окно ввода
EditorTextBox.cs: 37: /// С помощью этого конструктора, помните, чтобы связать
EditorTextBox.cs: 38: /// этот контроль перед использованием (назовем Bind DataRowView )
EditorTextBox.cs: 46: /// связать этот контроль на объекте DataRowView
EditorTextBox.cs: 63: /// происходит при нажатии из DataTable с контролем.
EditorTextBox.cs: 64: /// Мы только позволяют выдвинуть один раз.  Тогда пусть пользователь редактировать материал.
EditorTextBox.cs: 74: /// происходит при связывании закончилась, показать пользователю, если мы смогли записать значения или нет.
EditorTextBox.cs: 99: /// Сброс свойства элемента управления на значения по умолчанию.
EditorTextBox.cs:100: /// Это полезно, так как мы можем затем использовать элементы управления.
Form1.cs: 42: /// от нагрузки файловой отрегулировать некоторые границы и сброса изменяемые значения пользователя.
Form1.cs: 92: /// Получить элементы, чтобы показать в открытом недавно меню
Form1.cs: 103: /// Пользователь нажал на колонке для сортировки по ним.
Form1.cs: 113: /// Открыть файл, читать и проверять данные, сделать таблицу данных и запустить контроля инициализацый.
Form1.cs: 133: Диалог открытия файла /// Показать выбирать CSV файл.
Form1.cs: 148: /// нажатия на пункт меню"New"создает пустую DataTable с типом по умолчанию.
Form1.cs: 161: /// очищает вид сетки внутренние фильтры и обновлений.
Form1.cs: 162: /// не стирает строки, которые пользователь ввел в фильтр текстовых полях.
Form1.cs: 174: /// Применить введенные пользователем запрос таблицы данных строк.
Form1.cs: 191: /// Вызывается при переходе к другой странице или изменения номера строк на странице.
Form1.cs: 192: /// принимает во внимание фильтры.
Form1.cs: 194: /// Это обработчик событий для NumericUpDown.... ValueChanged событий
Form1.cs: 224: /// Написать DataTable из памяти в файл.
Form1.cs: 245: /// Сохранить как ( Новый файл ) нажатие кнопки
Form1.cs: 267: /// сохранения файла ( добавление) пункт меню кнопки.
Form1.cs: 288: /// Сохранить ( перезаписи ) Кнопка меню нажмите
Form1.cs: 313: /// Сохранить настройки пользователя при выходе.
Form1.cs: 323: /// Запускает форму для редактирования строки.
Form1.cs: 341: /// Добавить новую запись
Form1.cs: 357: /// Редактировать существующая запись
Form1.cs: 372: /// Удалить строку
MapDataRow.cs: 10: /// Карты одна строка в CSV файл со свойствами.
MapDataRow.cs: 38: /// Беспараметрическая конструктор, необходимые для использования в CSV парсер.
OpenData.cs:15: /// Класс фактически разобрать строки в CSV -файл.
OpenData.cs: 27: /// Построить новый читатель CSV от источника потока
OpenData.cs: 40: /// перебора всех строк в этой CSV файла
OpenData.cs: 49: /// перебора всех строк этого файла CSV
OpenData.cs: 58: /// перебора всех строк этого файла CSV
OpenData.cs: 78: /// Получить следующую строку из файла.
OpenData.cs: 87: /// закрывать ресурсы - в частности, читатель поток
OpenData.cs: 96: /// десериализации CSV файл в списке набранных объектов
OpenData.cs: 182: /// Разбор линию, значения которого могут включать новые символы строки или CR / LF
OpenData.cs: 212: /// Разбор строки и вернуть массив, если это удастся, или в лучшем случае как мы можем получить
OpenData.cs: 224: /// прочитал в строке текста, а также использовать функцию Add (), чтобы добавить эти элементы к существующей структуре CSV
OpenData.cs: 310: /// Простой тип.
OpenData.cs: 314: /// Расширенный тип, который объединяет простые типы.
OpenData.cs: 318: /// Результат разбора файла CSV
OpenData.cs: 323: /// подключить несколько внутреннее до нескольких внешнее.
OpenData.cs: 338: /// Открыть файл, читать и проверять данные, сделать таблицу данных и запустить контроля инициализацый.
OpenData.cs: 355: /// перерасчет динамический столбец строки.
OpenData.cs: 397: /// Функция для заполнения внутренними и внешними списками на основе данных Raw списке.
OpenData.cs: 430: /// прочитал свойств Т и
OpenData.cs: 431: /// собрать DataTable, которая будет представлять его.
OpenData.cs: 459: /// сделать пустую таблицу данных с макета, чтобы содержать типа T.
OpenData.cs: 477: /// открывает диалоговое окно для получения путь файла для открытия из тэ пользователя.
Program.cs: 3: /// TODO: Тест OpenFileDialog попробуйте нажать открытым, когда выбрано несколько файлов.
Program.cs: 4: /// TODO: условно добавить окончательный запятой для поставки пользовательским пользовательского запроса.  ( В пользовательском фильтре )
Program.cs: 5: /// TODO: Отделка факторинг из Сохранить диалогов.  ( Диалогах открытия / сохранения, чтобы получить пути от пользователя )
Program.cs: 6: /// TODO: Запуск bugtests по добавлению последние файлы.  Убедитесь лямбда-выражений не кэшировать старые имена файлов.
Program.cs: 7: /// TODO: Добавьте предупреждение на выходе, если есть несохраненные изменения данных ( проверить dataview.RowStateFilter возвращает не пустое )
Program.cs: 8: /// TODO: Save To ( добавить ) не работает, потому диалог с заменить всплывает.
Program.cs: 9: /// TODO: Исправить в настоящее время открыты каталог вместе с настоящее OPENFILENAME в RecentFilesFilders.cs
Program.cs: 10: /// TODO: Показать путь к файлу из текущей таблицы в статусе вида
Program.cs: 11: /// TODO: Более надежная разбора?
Program.cs: 12: /// TODO: На Сохранить (перезапись ) мы должны действительно спросить, что режим вы хотите в окне сообщения.
Program.cs: 13: /// TODO: Что делать, если колонка для фильтрации имеет странное полукокса, что будет беспорядок все вверх?  См ViewData.
Program.cs: 14: /// TODO тест: редактирование строки будет работать с несколькими страницами.  ( Потому что мы получаем относительную индекс DataGridView, он будет таким же, как относительное индекса в DataView )
Program.cs: 15: /// TODO: Тест, что происходит на новом файле и различные фильтры.  Потому при загрузке файла из CSV мы добавим новый столбец.
Program.cs: 33: /// Главная точка входа для приложения.
RecentFilesFolders.cs: 31: /// событие огонь по текущим изменением пути к файлу.
RecentFilesFolders.cs: 43: /// указан разумным соотношением каталога в диалоговом окне Open File.
RecentFilesFolders.cs: 52: /// открытом Последние файлы были изменены.  Обновите представление в меню.
RecentFilesFolders.cs: 71: /// Добавить новый элемент в меню недавних файлов и сохранить его упорно
RegistryOfficeDataRow.cs: 10: /// Представляет несколько книг.
RegistryOfficeDataRow.cs: 38: /// Беспараметрическая конструктор необходимо для использования в CSV парсер.
RegistryOfficeDataRow.cs: 67: /// Сделать из карт необработанных данных
RegistryOfficeDataRow.cs: 98: /// Создать новый экземпляр из разобранного данных
SaveData.cs: 15: /// Класс сериализовать данные CSV из таблицы данных в файл.
SaveData.cs: 25: /// Создает новый CSV писатель производить вывод на прилагаемом StreamWriter
SaveData.cs: 36: /// Написать таблицу данных в поток в формате CSV
SaveData.cs: 68: /// закрывать ресурсы - в частности, читатель поток
SaveData.cs: 78: /// Написать одну строку в файл
SaveData.cs: 87: /// Выходной одно значение поля по мере необходимости
SaveData.cs: 134: /// Написать таблицу данных в поток в формате CSV
SaveData.cs: 151: /// Написать таблицу данных в поток в формате CSV
SaveData.cs: 161: /// Написать таблицу данных в поток в формате CSV
SaveData.cs:162: /// Добавить к существующему файлу.
SaveData.cs: 172: /// Открывает диалог, чтобы получить путь, по которому для сохранения текущих данных.
SaveData.cs: 192: /// Открывает диалог, чтобы получить путь, по которому для сохранения текущих данных.
SaveData.cs: 193: /// Не предупреждать пользователя о перезаписи файла.
ViewData.cs: 51: /// Получить общее количество строк, которые мы имеем ( после фильтрации и сортировки на DataTable )
ViewData.cs: 59: /// Получить общее число страниц
ViewData.cs: 67: /// Получить количество записей после применения фильтров.
ViewData.cs: 75: /// Получить количество страниц, полных записей после применения фильтров.
ViewData.cs: 83: /// Получить набор количество записей на странице, чтобы показать в dataGridView1
ViewData.cs: 91: /// Получить набор индекс текущей страницы для отображения в dataGridView1
ViewData.cs: 112: /// Полезный так что пользователь может поставить свой матч точно.  ( Мы избегаем странные символы )
ViewData.cs: 133: /// Создание базовой фильтр, основанный на имени столбца и строки, чтобы соответствовать.
ViewData.cs: 146: /// Применить введенные пользователем запрос таблицы данных строк.
ViewData.cs: 156: /// Удалить все фильтры
ViewData.cs:164: /// Вызывается при переходе к другой странице или номер изменения строк на странице.
ViewData.cs: 165: /// принимает фильтры и сортировки учетом.
